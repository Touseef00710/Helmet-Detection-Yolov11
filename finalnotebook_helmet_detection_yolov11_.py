# -*- coding: utf-8 -*-
"""Finalnotebook-Helmet-Detection-Yolov11_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RV9VaOhqvLNg_HOFZdPWReFwfTmOdJ5s

##  Helmet_Detection_using_Yolo11.

**Step 01: Check GPU and Install Packages**
"""

!nvidia-smi
!pip install ultralytics roboflow seaborn

"""**Step 02: Import Required Libraries**"""

import ultralytics
ultralytics.checks()

from ultralytics import YOLO
from IPython.display import Image, display
import matplotlib.pyplot as plt
import seaborn as sns
import glob, os

"""**Step 03: Download Dataset from Roboflow**"""

from roboflow import Roboflow
rf = Roboflow(api_key="ZkNMlNnyIa2y7w8zGWMS")
project = rf.workspace("yolo-do-it-yhopz").project("helmet-detector-9rzmg-bmd6q")
version = project.version(1)
dataset = version.download("yolov11")   # âœ… YOLOv11 format
print("Dataset downloaded at:", dataset.location)

"""**Step 04: Train YOLOv11 Model**"""

!yolo task=detect mode=train data={dataset.location}/data.yaml model=yolo11n.pt epochs=50 imgsz=640

"""**Step 05: Examine Training Results**"""

display(Image("/content/runs/detect/train/confusion_matrix.png", width=600))
display(Image("/content/runs/detect/train/results.png", width=600))
display(Image("/content/runs/detect/train/train_batch0.jpg", width=600))

"""**Step 06: Inference on Test Images**"""

!yolo task=detect mode=predict model=/content/runs/detect/train/weights/best.pt conf=0.25 source={dataset.location}/test/images save=True

latest_folder = max(glob.glob('/content/runs/detect/predict*/'), key=os.path.getmtime)
for img in glob.glob(f'{latest_folder}/*.jpg')[:3]:
    display(Image(filename=img, width=600))

"""**Step 07: Evaluate Model Performance (Step 09)**"""

model = YOLO("/content/runs/detect/train/weights/best.pt")
metrics = model.val(data=f"{dataset.location}/data.yaml", split="test")

# Global metrics
precision = metrics.box.mp
recall = metrics.box.mr
f1 = 2 * (precision * recall) / (precision + recall + 1e-6)

print("\nðŸ“Š Evaluation Metrics:")
print(f"mAP@0.5     : {metrics.box.map50:.4f}")
print(f"mAP@0.5:0.95: {metrics.box.map:.4f}")
print(f"Precision   : {precision:.4f}")
print(f"Recall      : {recall:.4f}")
print(f"F1-score    : {f1:.4f}")

# Per-class metrics
print("\nðŸ“Œ Per-Class Metrics:")
for i, cname in enumerate(model.names.values()):
    print(f"Class: {cname:12s} | "
          f"Precision: {metrics.box.p[i]:.4f} | "
          f"Recall: {metrics.box.r[i]:.4f}")


# Confusion Matrix
cm = metrics.confusion_matrix.matrix
class_names = list(model.names.values())
plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt=".0f", cmap="Blues",
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix (Helmet Detection)")
plt.show()